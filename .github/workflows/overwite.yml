name: Upload JAR to Box

on:
  workflow_dispatch:

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install Node.js dependencies
        run: npm install box-node-sdk axios

      - name: Upload JAR to Box
        env:
          BOX_CLIENT_ID: ${{ secrets.BOX_CLIENT_ID }}
          BOX_CLIENT_SECRET: ${{ secrets.BOX_CLIENT_SECRET }}
          BOX_REFRESH_TOKEN: ${{ secrets.BOX_REFRESH_TOKEN }}
        run: |
          node <<EOF
          const BoxSDK = require('box-node-sdk');
          const axios = require('axios');

          const refreshToken = async () => {
            const response = await axios.post('https://api.box.com/oauth2/token', null, {
              params: {
                grant_type: 'refresh_token',
                refresh_token: process.env.BOX_REFRESH_TOKEN,
                client_id: process.env.BOX_CLIENT_ID,
                client_secret: process.env.BOX_CLIENT_SECRET,
              }
            });
            return response.data.access_token;
          };

          (async () => {
            const accessToken = await refreshToken();
            const sdk = new BoxSDK({
              clientID: process.env.BOX_CLIENT_ID,
              clientSecret: process.env.BOX_CLIENT_SECRET
            });
            
            const client = sdk.getBasicClient(accessToken);
            const folderId = '0'; // root folder

            // Check if the file already exists
            const items = await client.folders.getItems(folderId, { limit: 1000 });
            const existingFile = items.entries.find(item => item.name === 'myTest.jar');

            if (existingFile) {
              // File exists, overwrite it
              const fileId = existingFile.id;
              const fs = require('fs');
              const stream = fs.createReadStream('./myTest.jar');
              
              client.files.update(fileId, {}, stream)
                .then(file => console.log('File overwritten:', file))
                .catch(err => console.error('Error overwriting file:', err));
            } else {
              // File doesn't exist, upload it
              const fs = require('fs');
              const stream = fs.createReadStream('./myTest.jar');
              
              client.files.uploadFile(folderId, 'myTest.jar', stream)
                .then(file => console.log('File uploaded:', file))
                .catch(err => console.error('Error uploading file:', err));
            }
          })();
          EOF

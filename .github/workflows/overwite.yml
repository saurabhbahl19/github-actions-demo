name: Upload JAR to Box

on:
  workflow_dispatch:

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install Box SDK
        run: npm install box-node-sdk

      - name: Upload JAR to Box
        env:
          BOX_CLIENT_ID: ${{ secrets.BOX_CLIENT_ID }}
          BOX_CLIENT_SECRET: ${{ secrets.BOX_CLIENT_SECRET }}
          BOX_REFRESH_TOKEN: ${{ secrets.BOX_REFRESH_TOKEN }}
        run: |
          node -e "
          const https = require('https');
          const BoxSDK = require('box-node-sdk');
          const querystring = require('querystring');
          const fs = require('fs');

          const refreshToken = () => {
            return new Promise((resolve, reject) => {
              const postData = querystring.stringify({
                'grant_type': 'refresh_token',
                'refresh_token': process.env.BOX_REFRESH_TOKEN,
                'client_id': process.env.BOX_CLIENT_ID,
                'client_secret': process.env.BOX_CLIENT_SECRET,
              });

              const options = {
                hostname: 'api.box.com',
                path: '/oauth2/token',
                method: 'POST',
                headers: {
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Content-Length': postData.length,
                },
              };

              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => {
                  data += chunk;
                });
                res.on('end', () => {
                  if (res.statusCode === 200) {
                    resolve(JSON.parse(data).access_token);
                  } else {
                    reject(new Error(`Failed to refresh token: ${data}`));
                  }
                });
              });

              req.on('error', (e) => {
                reject(e);
              });

              req.write(postData);
              req.end();
            });
          };

          (async () => {
            try {
              const accessToken = await refreshToken();
              const sdk = new BoxSDK({
                clientID: process.env.BOX_CLIENT_ID,
                clientSecret: process.env.BOX_CLIENT_SECRET
              });
              
              const client = sdk.getBasicClient(accessToken);
              const folderId = '0'; // root folder

              const items = await client.folders.getItems(folderId, { limit: 1000 });
              const existingFile = items.entries.find(item => item.name === 'myTest.jar');

              const stream = fs.createReadStream('./myTest.jar');

              if (existingFile) {
                const fileId = existingFile.id;
                client.files.update(fileId, {}, stream)
                  .then(file => console.log('File overwritten:', file))
                  .catch(err => console.error('Error overwriting file:', err));
              } else {
                client.files.uploadFile(folderId, 'myTest.jar', stream)
                  .then(file => console.log('File uploaded:', file))
                  .catch(err => console.error('Error uploading file:', err));
              }
            } catch (error) {
              console.error('Error:', error);
            }
          })();
          "
